// Generated by `wit-bindgen` 0.25.0. DO NOT EDIT!
// Options used:
#[allow(dead_code)]
pub mod exports {
    #[allow(dead_code)]
    pub mod component {
        #[allow(dead_code)]
        pub mod tasklist {
            #[allow(dead_code, clippy::all)]
            pub mod tasklist {
                #[used]
                #[doc(hidden)]
                #[cfg(target_arch = "wasm32")]
                static __FORCE_SECTION_REF: fn() =
                    super::super::super::super::__link_custom_section_describing_imports;
                use super::super::super::super::_rt;
                #[repr(C)]
                #[derive(Clone, Copy)]
                pub struct Position {
                    pub x: f32,
                    pub y: f32,
                }
                impl ::core::fmt::Debug for Position {
                    fn fmt(&self, f: &mut ::core::fmt::Formatter<'_>) -> ::core::fmt::Result {
                        f.debug_struct("Position")
                            .field("x", &self.x)
                            .field("y", &self.y)
                            .finish()
                    }
                }
                #[repr(C)]
                #[derive(Clone, Copy)]
                pub struct Size {
                    pub width: f32,
                    pub height: f32,
                }
                impl ::core::fmt::Debug for Size {
                    fn fmt(&self, f: &mut ::core::fmt::Formatter<'_>) -> ::core::fmt::Result {
                        f.debug_struct("Size")
                            .field("width", &self.width)
                            .field("height", &self.height)
                            .finish()
                    }
                }
                #[derive(Clone)]
                pub struct Task {
                    pub id: _rt::String,
                    pub name: _rt::String,
                    pub position: Position,
                    pub size: Option<Size>,
                }
                impl ::core::fmt::Debug for Task {
                    fn fmt(&self, f: &mut ::core::fmt::Formatter<'_>) -> ::core::fmt::Result {
                        f.debug_struct("Task")
                            .field("id", &self.id)
                            .field("name", &self.name)
                            .field("position", &self.position)
                            .field("size", &self.size)
                            .finish()
                    }
                }
                #[derive(Clone)]
                pub struct Transition {
                    pub id: _rt::String,
                    pub source_task_id: _rt::String,
                    pub target_task_id: _rt::String,
                }
                impl ::core::fmt::Debug for Transition {
                    fn fmt(&self, f: &mut ::core::fmt::Formatter<'_>) -> ::core::fmt::Result {
                        f.debug_struct("Transition")
                            .field("id", &self.id)
                            .field("source-task-id", &self.source_task_id)
                            .field("target-task-id", &self.target_task_id)
                            .finish()
                    }
                }

                #[derive(Debug)]
                #[repr(transparent)]
                pub struct TasklistModel {
                    handle: _rt::Resource<TasklistModel>,
                }

                type _TasklistModelRep<T> = Option<T>;

                impl TasklistModel {
                    /// Creates a new resource from the specified representation.
                    ///
                    /// This function will create a new resource handle by moving `val` onto
                    /// the heap and then passing that heap pointer to the component model to
                    /// create a handle. The owned handle is then returned as `TasklistModel`.
                    pub fn new<T: GuestTasklistModel>(val: T) -> Self {
                        Self::type_guard::<T>();
                        let val: _TasklistModelRep<T> = Some(val);
                        let ptr: *mut _TasklistModelRep<T> = _rt::Box::into_raw(_rt::Box::new(val));
                        unsafe { Self::from_handle(T::_resource_new(ptr.cast())) }
                    }

                    /// Gets access to the underlying `T` which represents this resource.
                    pub fn get<T: GuestTasklistModel>(&self) -> &T {
                        let ptr = unsafe { &*self.as_ptr::<T>() };
                        ptr.as_ref().unwrap()
                    }

                    /// Gets mutable access to the underlying `T` which represents this
                    /// resource.
                    pub fn get_mut<T: GuestTasklistModel>(&mut self) -> &mut T {
                        let ptr = unsafe { &mut *self.as_ptr::<T>() };
                        ptr.as_mut().unwrap()
                    }

                    /// Consumes this resource and returns the underlying `T`.
                    pub fn into_inner<T: GuestTasklistModel>(self) -> T {
                        let ptr = unsafe { &mut *self.as_ptr::<T>() };
                        ptr.take().unwrap()
                    }

                    #[doc(hidden)]
                    pub unsafe fn from_handle(handle: u32) -> Self {
                        Self {
                            handle: _rt::Resource::from_handle(handle),
                        }
                    }

                    #[doc(hidden)]
                    pub fn take_handle(&self) -> u32 {
                        _rt::Resource::take_handle(&self.handle)
                    }

                    #[doc(hidden)]
                    pub fn handle(&self) -> u32 {
                        _rt::Resource::handle(&self.handle)
                    }

                    // It's theoretically possible to implement the `GuestTasklistModel` trait twice
                    // so guard against using it with two different types here.
                    #[doc(hidden)]
                    fn type_guard<T: 'static>() {
                        use core::any::TypeId;
                        static mut LAST_TYPE: Option<TypeId> = None;
                        unsafe {
                            assert!(!cfg!(target_feature = "threads"));
                            let id = TypeId::of::<T>();
                            match LAST_TYPE {
                                Some(ty) => assert!(
                                    ty == id,
                                    "cannot use two types with this resource type"
                                ),
                                None => LAST_TYPE = Some(id),
                            }
                        }
                    }

                    #[doc(hidden)]
                    pub unsafe fn dtor<T: 'static>(handle: *mut u8) {
                        Self::type_guard::<T>();
                        let _ = _rt::Box::from_raw(handle as *mut _TasklistModelRep<T>);
                    }

                    fn as_ptr<T: GuestTasklistModel>(&self) -> *mut _TasklistModelRep<T> {
                        TasklistModel::type_guard::<T>();
                        T::_resource_rep(self.handle()).cast()
                    }
                }

                /// A borrowed version of [`TasklistModel`] which represents a borrowed value
                /// with the lifetime `'a`.
                #[derive(Debug)]
                #[repr(transparent)]
                pub struct TasklistModelBorrow<'a> {
                    rep: *mut u8,
                    _marker: core::marker::PhantomData<&'a TasklistModel>,
                }

                impl<'a> TasklistModelBorrow<'a> {
                    #[doc(hidden)]
                    pub unsafe fn lift(rep: usize) -> Self {
                        Self {
                            rep: rep as *mut u8,
                            _marker: core::marker::PhantomData,
                        }
                    }

                    /// Gets access to the underlying `T` in this resource.
                    pub fn get<T: GuestTasklistModel>(&self) -> &T {
                        let ptr = unsafe { &mut *self.as_ptr::<T>() };
                        ptr.as_ref().unwrap()
                    }

                    // NB: mutable access is not allowed due to the component model allowing
                    // multiple borrows of the same resource.

                    fn as_ptr<T: 'static>(&self) -> *mut _TasklistModelRep<T> {
                        TasklistModel::type_guard::<T>();
                        self.rep.cast()
                    }
                }

                unsafe impl _rt::WasmResource for TasklistModel {
                    #[inline]
                    unsafe fn drop(_handle: u32) {
                        #[cfg(not(target_arch = "wasm32"))]
                        unreachable!();

                        #[cfg(target_arch = "wasm32")]
                        {
                            #[link(wasm_import_module = "[export]component:tasklist/tasklist")]
                            extern "C" {
                                #[link_name = "[resource-drop]tasklist-model"]
                                fn drop(_: u32);
                            }

                            drop(_handle);
                        }
                    }
                }

                #[doc(hidden)]
                #[allow(non_snake_case)]
                pub unsafe fn _export_method_tasklist_model_id_cabi<T: GuestTasklistModel>(
                    arg0: *mut u8,
                ) -> *mut u8 {
                    #[cfg(target_arch = "wasm32")]
                    _rt::run_ctors_once();
                    let result0 = T::id(TasklistModelBorrow::lift(arg0 as u32 as usize).get());
                    let ptr1 = _RET_AREA.0.as_mut_ptr().cast::<u8>();
                    let vec2 = (result0.into_bytes()).into_boxed_slice();
                    let ptr2 = vec2.as_ptr().cast::<u8>();
                    let len2 = vec2.len();
                    ::core::mem::forget(vec2);
                    *ptr1.add(4).cast::<usize>() = len2;
                    *ptr1.add(0).cast::<*mut u8>() = ptr2.cast_mut();
                    ptr1
                }
                #[doc(hidden)]
                #[allow(non_snake_case)]
                pub unsafe fn __post_return_method_tasklist_model_id<T: GuestTasklistModel>(
                    arg0: *mut u8,
                ) {
                    let l0 = *arg0.add(0).cast::<*mut u8>();
                    let l1 = *arg0.add(4).cast::<usize>();
                    _rt::cabi_dealloc(l0, l1, 1);
                }
                #[doc(hidden)]
                #[allow(non_snake_case)]
                pub unsafe fn _export_method_tasklist_model_tasks_cabi<T: GuestTasklistModel>(
                    arg0: *mut u8,
                ) -> *mut u8 {
                    #[cfg(target_arch = "wasm32")]
                    _rt::run_ctors_once();
                    let result0 = T::tasks(TasklistModelBorrow::lift(arg0 as u32 as usize).get());
                    let ptr1 = _RET_AREA.0.as_mut_ptr().cast::<u8>();
                    let vec7 = result0;
                    let len7 = vec7.len();
                    let layout7 = _rt::alloc::Layout::from_size_align_unchecked(vec7.len() * 36, 4);
                    let result7 = if layout7.size() != 0 {
                        let ptr = _rt::alloc::alloc(layout7).cast::<u8>();
                        if ptr.is_null() {
                            _rt::alloc::handle_alloc_error(layout7);
                        }
                        ptr
                    } else {
                        {
                            ::core::ptr::null_mut()
                        }
                    };
                    for (i, e) in vec7.into_iter().enumerate() {
                        let base = result7.add(i * 36);
                        {
                            let Task {
                                id: id2,
                                name: name2,
                                position: position2,
                                size: size2,
                            } = e;
                            let vec3 = (id2.into_bytes()).into_boxed_slice();
                            let ptr3 = vec3.as_ptr().cast::<u8>();
                            let len3 = vec3.len();
                            ::core::mem::forget(vec3);
                            *base.add(4).cast::<usize>() = len3;
                            *base.add(0).cast::<*mut u8>() = ptr3.cast_mut();
                            let vec4 = (name2.into_bytes()).into_boxed_slice();
                            let ptr4 = vec4.as_ptr().cast::<u8>();
                            let len4 = vec4.len();
                            ::core::mem::forget(vec4);
                            *base.add(12).cast::<usize>() = len4;
                            *base.add(8).cast::<*mut u8>() = ptr4.cast_mut();
                            let Position { x: x5, y: y5 } = position2;
                            *base.add(16).cast::<f32>() = _rt::as_f32(x5);
                            *base.add(20).cast::<f32>() = _rt::as_f32(y5);
                            match size2 {
                                Some(e) => {
                                    *base.add(24).cast::<u8>() = (1i32) as u8;
                                    let Size {
                                        width: width6,
                                        height: height6,
                                    } = e;
                                    *base.add(28).cast::<f32>() = _rt::as_f32(width6);
                                    *base.add(32).cast::<f32>() = _rt::as_f32(height6);
                                }
                                None => {
                                    *base.add(24).cast::<u8>() = (0i32) as u8;
                                }
                            };
                        }
                    }
                    *ptr1.add(4).cast::<usize>() = len7;
                    *ptr1.add(0).cast::<*mut u8>() = result7;
                    ptr1
                }
                #[doc(hidden)]
                #[allow(non_snake_case)]
                pub unsafe fn __post_return_method_tasklist_model_tasks<T: GuestTasklistModel>(
                    arg0: *mut u8,
                ) {
                    let l4 = *arg0.add(0).cast::<*mut u8>();
                    let l5 = *arg0.add(4).cast::<usize>();
                    let base6 = l4;
                    let len6 = l5;
                    for i in 0..len6 {
                        let base = base6.add(i * 36);
                        {
                            let l0 = *base.add(0).cast::<*mut u8>();
                            let l1 = *base.add(4).cast::<usize>();
                            _rt::cabi_dealloc(l0, l1, 1);
                            let l2 = *base.add(8).cast::<*mut u8>();
                            let l3 = *base.add(12).cast::<usize>();
                            _rt::cabi_dealloc(l2, l3, 1);
                        }
                    }
                    _rt::cabi_dealloc(base6, len6 * 36, 4);
                }
                #[doc(hidden)]
                #[allow(non_snake_case)]
                pub unsafe fn _export_method_tasklist_model_transitions_cabi<
                    T: GuestTasklistModel,
                >(
                    arg0: *mut u8,
                ) -> *mut u8 {
                    #[cfg(target_arch = "wasm32")]
                    _rt::run_ctors_once();
                    let result0 =
                        T::transitions(TasklistModelBorrow::lift(arg0 as u32 as usize).get());
                    let ptr1 = _RET_AREA.0.as_mut_ptr().cast::<u8>();
                    let vec6 = result0;
                    let len6 = vec6.len();
                    let layout6 = _rt::alloc::Layout::from_size_align_unchecked(vec6.len() * 24, 4);
                    let result6 = if layout6.size() != 0 {
                        let ptr = _rt::alloc::alloc(layout6).cast::<u8>();
                        if ptr.is_null() {
                            _rt::alloc::handle_alloc_error(layout6);
                        }
                        ptr
                    } else {
                        {
                            ::core::ptr::null_mut()
                        }
                    };
                    for (i, e) in vec6.into_iter().enumerate() {
                        let base = result6.add(i * 24);
                        {
                            let Transition {
                                id: id2,
                                source_task_id: source_task_id2,
                                target_task_id: target_task_id2,
                            } = e;
                            let vec3 = (id2.into_bytes()).into_boxed_slice();
                            let ptr3 = vec3.as_ptr().cast::<u8>();
                            let len3 = vec3.len();
                            ::core::mem::forget(vec3);
                            *base.add(4).cast::<usize>() = len3;
                            *base.add(0).cast::<*mut u8>() = ptr3.cast_mut();
                            let vec4 = (source_task_id2.into_bytes()).into_boxed_slice();
                            let ptr4 = vec4.as_ptr().cast::<u8>();
                            let len4 = vec4.len();
                            ::core::mem::forget(vec4);
                            *base.add(12).cast::<usize>() = len4;
                            *base.add(8).cast::<*mut u8>() = ptr4.cast_mut();
                            let vec5 = (target_task_id2.into_bytes()).into_boxed_slice();
                            let ptr5 = vec5.as_ptr().cast::<u8>();
                            let len5 = vec5.len();
                            ::core::mem::forget(vec5);
                            *base.add(20).cast::<usize>() = len5;
                            *base.add(16).cast::<*mut u8>() = ptr5.cast_mut();
                        }
                    }
                    *ptr1.add(4).cast::<usize>() = len6;
                    *ptr1.add(0).cast::<*mut u8>() = result6;
                    ptr1
                }
                #[doc(hidden)]
                #[allow(non_snake_case)]
                pub unsafe fn __post_return_method_tasklist_model_transitions<
                    T: GuestTasklistModel,
                >(
                    arg0: *mut u8,
                ) {
                    let l6 = *arg0.add(0).cast::<*mut u8>();
                    let l7 = *arg0.add(4).cast::<usize>();
                    let base8 = l6;
                    let len8 = l7;
                    for i in 0..len8 {
                        let base = base8.add(i * 24);
                        {
                            let l0 = *base.add(0).cast::<*mut u8>();
                            let l1 = *base.add(4).cast::<usize>();
                            _rt::cabi_dealloc(l0, l1, 1);
                            let l2 = *base.add(8).cast::<*mut u8>();
                            let l3 = *base.add(12).cast::<usize>();
                            _rt::cabi_dealloc(l2, l3, 1);
                            let l4 = *base.add(16).cast::<*mut u8>();
                            let l5 = *base.add(20).cast::<usize>();
                            _rt::cabi_dealloc(l4, l5, 1);
                        }
                    }
                    _rt::cabi_dealloc(base8, len8 * 24, 4);
                }
                #[doc(hidden)]
                #[allow(non_snake_case)]
                pub unsafe fn _export_method_tasklist_model_add_task_cabi<T: GuestTasklistModel>(
                    arg0: *mut u8,
                    arg1: f32,
                    arg2: f32,
                ) -> *mut u8 {
                    #[cfg(target_arch = "wasm32")]
                    _rt::run_ctors_once();
                    let result0 = T::add_task(
                        TasklistModelBorrow::lift(arg0 as u32 as usize).get(),
                        Position { x: arg1, y: arg2 },
                    );
                    let ptr1 = _RET_AREA.0.as_mut_ptr().cast::<u8>();
                    let Task {
                        id: id2,
                        name: name2,
                        position: position2,
                        size: size2,
                    } = result0;
                    let vec3 = (id2.into_bytes()).into_boxed_slice();
                    let ptr3 = vec3.as_ptr().cast::<u8>();
                    let len3 = vec3.len();
                    ::core::mem::forget(vec3);
                    *ptr1.add(4).cast::<usize>() = len3;
                    *ptr1.add(0).cast::<*mut u8>() = ptr3.cast_mut();
                    let vec4 = (name2.into_bytes()).into_boxed_slice();
                    let ptr4 = vec4.as_ptr().cast::<u8>();
                    let len4 = vec4.len();
                    ::core::mem::forget(vec4);
                    *ptr1.add(12).cast::<usize>() = len4;
                    *ptr1.add(8).cast::<*mut u8>() = ptr4.cast_mut();
                    let Position { x: x5, y: y5 } = position2;
                    *ptr1.add(16).cast::<f32>() = _rt::as_f32(x5);
                    *ptr1.add(20).cast::<f32>() = _rt::as_f32(y5);
                    match size2 {
                        Some(e) => {
                            *ptr1.add(24).cast::<u8>() = (1i32) as u8;
                            let Size {
                                width: width6,
                                height: height6,
                            } = e;
                            *ptr1.add(28).cast::<f32>() = _rt::as_f32(width6);
                            *ptr1.add(32).cast::<f32>() = _rt::as_f32(height6);
                        }
                        None => {
                            *ptr1.add(24).cast::<u8>() = (0i32) as u8;
                        }
                    };
                    ptr1
                }
                #[doc(hidden)]
                #[allow(non_snake_case)]
                pub unsafe fn __post_return_method_tasklist_model_add_task<
                    T: GuestTasklistModel,
                >(
                    arg0: *mut u8,
                ) {
                    let l0 = *arg0.add(0).cast::<*mut u8>();
                    let l1 = *arg0.add(4).cast::<usize>();
                    _rt::cabi_dealloc(l0, l1, 1);
                    let l2 = *arg0.add(8).cast::<*mut u8>();
                    let l3 = *arg0.add(12).cast::<usize>();
                    _rt::cabi_dealloc(l2, l3, 1);
                }
                #[doc(hidden)]
                #[allow(non_snake_case)]
                pub unsafe fn _export_method_tasklist_model_remove_task_cabi<
                    T: GuestTasklistModel,
                >(
                    arg0: *mut u8,
                    arg1: *mut u8,
                    arg2: usize,
                ) {
                    #[cfg(target_arch = "wasm32")]
                    _rt::run_ctors_once();
                    let len0 = arg2;
                    let bytes0 = _rt::Vec::from_raw_parts(arg1.cast(), len0, len0);
                    T::remove_task(
                        TasklistModelBorrow::lift(arg0 as u32 as usize).get(),
                        _rt::string_lift(bytes0),
                    );
                }
                #[doc(hidden)]
                #[allow(non_snake_case)]
                pub unsafe fn _export_method_tasklist_model_resize_task_cabi<
                    T: GuestTasklistModel,
                >(
                    arg0: *mut u8,
                    arg1: *mut u8,
                    arg2: usize,
                    arg3: f32,
                    arg4: f32,
                ) {
                    #[cfg(target_arch = "wasm32")]
                    _rt::run_ctors_once();
                    let len0 = arg2;
                    let bytes0 = _rt::Vec::from_raw_parts(arg1.cast(), len0, len0);
                    T::resize_task(
                        TasklistModelBorrow::lift(arg0 as u32 as usize).get(),
                        _rt::string_lift(bytes0),
                        Size {
                            width: arg3,
                            height: arg4,
                        },
                    );
                }
                #[doc(hidden)]
                #[allow(non_snake_case)]
                pub unsafe fn _export_method_tasklist_model_move_task_cabi<
                    T: GuestTasklistModel,
                >(
                    arg0: *mut u8,
                    arg1: *mut u8,
                    arg2: usize,
                    arg3: f32,
                    arg4: f32,
                ) {
                    #[cfg(target_arch = "wasm32")]
                    _rt::run_ctors_once();
                    let len0 = arg2;
                    let bytes0 = _rt::Vec::from_raw_parts(arg1.cast(), len0, len0);
                    T::move_task(
                        TasklistModelBorrow::lift(arg0 as u32 as usize).get(),
                        _rt::string_lift(bytes0),
                        Position { x: arg3, y: arg4 },
                    );
                }
                #[doc(hidden)]
                #[allow(non_snake_case)]
                pub unsafe fn _export_method_tasklist_model_set_task_name_cabi<
                    T: GuestTasklistModel,
                >(
                    arg0: *mut u8,
                    arg1: *mut u8,
                    arg2: usize,
                    arg3: *mut u8,
                    arg4: usize,
                ) {
                    #[cfg(target_arch = "wasm32")]
                    _rt::run_ctors_once();
                    let len0 = arg2;
                    let bytes0 = _rt::Vec::from_raw_parts(arg1.cast(), len0, len0);
                    let len1 = arg4;
                    let bytes1 = _rt::Vec::from_raw_parts(arg3.cast(), len1, len1);
                    T::set_task_name(
                        TasklistModelBorrow::lift(arg0 as u32 as usize).get(),
                        _rt::string_lift(bytes0),
                        _rt::string_lift(bytes1),
                    );
                }
                #[doc(hidden)]
                #[allow(non_snake_case)]
                pub unsafe fn _export_method_tasklist_model_add_transition_cabi<
                    T: GuestTasklistModel,
                >(
                    arg0: *mut u8,
                    arg1: *mut u8,
                    arg2: usize,
                    arg3: *mut u8,
                    arg4: usize,
                ) -> *mut u8 {
                    #[cfg(target_arch = "wasm32")]
                    _rt::run_ctors_once();
                    let len0 = arg2;
                    let bytes0 = _rt::Vec::from_raw_parts(arg1.cast(), len0, len0);
                    let len1 = arg4;
                    let bytes1 = _rt::Vec::from_raw_parts(arg3.cast(), len1, len1);
                    let result2 = T::add_transition(
                        TasklistModelBorrow::lift(arg0 as u32 as usize).get(),
                        _rt::string_lift(bytes0),
                        _rt::string_lift(bytes1),
                    );
                    let ptr3 = _RET_AREA.0.as_mut_ptr().cast::<u8>();
                    let Transition {
                        id: id4,
                        source_task_id: source_task_id4,
                        target_task_id: target_task_id4,
                    } = result2;
                    let vec5 = (id4.into_bytes()).into_boxed_slice();
                    let ptr5 = vec5.as_ptr().cast::<u8>();
                    let len5 = vec5.len();
                    ::core::mem::forget(vec5);
                    *ptr3.add(4).cast::<usize>() = len5;
                    *ptr3.add(0).cast::<*mut u8>() = ptr5.cast_mut();
                    let vec6 = (source_task_id4.into_bytes()).into_boxed_slice();
                    let ptr6 = vec6.as_ptr().cast::<u8>();
                    let len6 = vec6.len();
                    ::core::mem::forget(vec6);
                    *ptr3.add(12).cast::<usize>() = len6;
                    *ptr3.add(8).cast::<*mut u8>() = ptr6.cast_mut();
                    let vec7 = (target_task_id4.into_bytes()).into_boxed_slice();
                    let ptr7 = vec7.as_ptr().cast::<u8>();
                    let len7 = vec7.len();
                    ::core::mem::forget(vec7);
                    *ptr3.add(20).cast::<usize>() = len7;
                    *ptr3.add(16).cast::<*mut u8>() = ptr7.cast_mut();
                    ptr3
                }
                #[doc(hidden)]
                #[allow(non_snake_case)]
                pub unsafe fn __post_return_method_tasklist_model_add_transition<
                    T: GuestTasklistModel,
                >(
                    arg0: *mut u8,
                ) {
                    let l0 = *arg0.add(0).cast::<*mut u8>();
                    let l1 = *arg0.add(4).cast::<usize>();
                    _rt::cabi_dealloc(l0, l1, 1);
                    let l2 = *arg0.add(8).cast::<*mut u8>();
                    let l3 = *arg0.add(12).cast::<usize>();
                    _rt::cabi_dealloc(l2, l3, 1);
                    let l4 = *arg0.add(16).cast::<*mut u8>();
                    let l5 = *arg0.add(20).cast::<usize>();
                    _rt::cabi_dealloc(l4, l5, 1);
                }
                #[doc(hidden)]
                #[allow(non_snake_case)]
                pub unsafe fn _export_method_tasklist_model_remove_transition_cabi<
                    T: GuestTasklistModel,
                >(
                    arg0: *mut u8,
                    arg1: *mut u8,
                    arg2: usize,
                ) {
                    #[cfg(target_arch = "wasm32")]
                    _rt::run_ctors_once();
                    let len0 = arg2;
                    let bytes0 = _rt::Vec::from_raw_parts(arg1.cast(), len0, len0);
                    T::remove_transition(
                        TasklistModelBorrow::lift(arg0 as u32 as usize).get(),
                        _rt::string_lift(bytes0),
                    );
                }
                #[doc(hidden)]
                #[allow(non_snake_case)]
                pub unsafe fn _export_method_tasklist_model_save_to_file_cabi<
                    T: GuestTasklistModel,
                >(
                    arg0: *mut u8,
                    arg1: *mut u8,
                    arg2: usize,
                ) {
                    #[cfg(target_arch = "wasm32")]
                    _rt::run_ctors_once();
                    let len0 = arg2;
                    let bytes0 = _rt::Vec::from_raw_parts(arg1.cast(), len0, len0);
                    T::save_to_file(
                        TasklistModelBorrow::lift(arg0 as u32 as usize).get(),
                        _rt::string_lift(bytes0),
                    );
                }
                #[doc(hidden)]
                #[allow(non_snake_case)]
                pub unsafe fn _export_method_tasklist_model_load_from_file_cabi<
                    T: GuestTasklistModel,
                >(
                    arg0: *mut u8,
                    arg1: *mut u8,
                    arg2: usize,
                ) {
                    #[cfg(target_arch = "wasm32")]
                    _rt::run_ctors_once();
                    let len0 = arg2;
                    let bytes0 = _rt::Vec::from_raw_parts(arg1.cast(), len0, len0);
                    T::load_from_file(
                        TasklistModelBorrow::lift(arg0 as u32 as usize).get(),
                        _rt::string_lift(bytes0),
                    );
                }
                #[doc(hidden)]
                #[allow(non_snake_case)]
                pub unsafe fn _export_static_tasklist_model_create_model_for_empty_file_cabi<
                    T: GuestTasklistModel,
                >() -> i32 {
                    #[cfg(target_arch = "wasm32")]
                    _rt::run_ctors_once();
                    let result0 = T::create_model_for_empty_file();
                    (result0).take_handle() as i32
                }
                pub trait Guest {
                    type TasklistModel: GuestTasklistModel;
                }
                pub trait GuestTasklistModel: 'static {
                    #[doc(hidden)]
                    unsafe fn _resource_new(val: *mut u8) -> u32
                    where
                        Self: Sized,
                    {
                        #[cfg(not(target_arch = "wasm32"))]
                        {
                            let _ = val;
                            unreachable!();
                        }

                        #[cfg(target_arch = "wasm32")]
                        {
                            #[link(wasm_import_module = "[export]component:tasklist/tasklist")]
                            extern "C" {
                                #[link_name = "[resource-new]tasklist-model"]
                                fn new(_: *mut u8) -> u32;
                            }
                            new(val)
                        }
                    }

                    #[doc(hidden)]
                    fn _resource_rep(handle: u32) -> *mut u8
                    where
                        Self: Sized,
                    {
                        #[cfg(not(target_arch = "wasm32"))]
                        {
                            let _ = handle;
                            unreachable!();
                        }

                        #[cfg(target_arch = "wasm32")]
                        {
                            #[link(wasm_import_module = "[export]component:tasklist/tasklist")]
                            extern "C" {
                                #[link_name = "[resource-rep]tasklist-model"]
                                fn rep(_: u32) -> *mut u8;
                            }
                            unsafe { rep(handle) }
                        }
                    }

                    fn id(&self) -> _rt::String;
                    fn tasks(&self) -> _rt::Vec<Task>;
                    fn transitions(&self) -> _rt::Vec<Transition>;
                    fn add_task(&self, position: Position) -> Task;
                    fn remove_task(&self, task_id: _rt::String);
                    fn resize_task(&self, task_id: _rt::String, size: Size);
                    fn move_task(&self, task_id: _rt::String, position: Position);
                    fn set_task_name(&self, task_id: _rt::String, label: _rt::String);
                    fn add_transition(
                        &self,
                        source_task_id: _rt::String,
                        target_task_id: _rt::String,
                    ) -> Transition;
                    fn remove_transition(&self, transition_id: _rt::String);
                    fn save_to_file(&self, filename: _rt::String);
                    fn load_from_file(&self, filename: _rt::String);
                    fn create_model_for_empty_file() -> TasklistModel;
                }
                #[doc(hidden)]

                macro_rules! __export_component_tasklist_tasklist_cabi{
  ($ty:ident with_types_in $($path_to_types:tt)*) => (const _: () = {

    #[export_name = "component:tasklist/tasklist#[method]tasklist-model.id"]
    unsafe extern "C" fn export_method_tasklist_model_id(arg0: *mut u8,) -> *mut u8 {
      $($path_to_types)*::_export_method_tasklist_model_id_cabi::<<$ty as $($path_to_types)*::Guest>::TasklistModel>(arg0)
    }
    #[export_name = "cabi_post_component:tasklist/tasklist#[method]tasklist-model.id"]
    unsafe extern "C" fn _post_return_method_tasklist_model_id(arg0: *mut u8,) {
      $($path_to_types)*::__post_return_method_tasklist_model_id::<<$ty as $($path_to_types)*::Guest>::TasklistModel>(arg0)
    }
    #[export_name = "component:tasklist/tasklist#[method]tasklist-model.tasks"]
    unsafe extern "C" fn export_method_tasklist_model_tasks(arg0: *mut u8,) -> *mut u8 {
      $($path_to_types)*::_export_method_tasklist_model_tasks_cabi::<<$ty as $($path_to_types)*::Guest>::TasklistModel>(arg0)
    }
    #[export_name = "cabi_post_component:tasklist/tasklist#[method]tasklist-model.tasks"]
    unsafe extern "C" fn _post_return_method_tasklist_model_tasks(arg0: *mut u8,) {
      $($path_to_types)*::__post_return_method_tasklist_model_tasks::<<$ty as $($path_to_types)*::Guest>::TasklistModel>(arg0)
    }
    #[export_name = "component:tasklist/tasklist#[method]tasklist-model.transitions"]
    unsafe extern "C" fn export_method_tasklist_model_transitions(arg0: *mut u8,) -> *mut u8 {
      $($path_to_types)*::_export_method_tasklist_model_transitions_cabi::<<$ty as $($path_to_types)*::Guest>::TasklistModel>(arg0)
    }
    #[export_name = "cabi_post_component:tasklist/tasklist#[method]tasklist-model.transitions"]
    unsafe extern "C" fn _post_return_method_tasklist_model_transitions(arg0: *mut u8,) {
      $($path_to_types)*::__post_return_method_tasklist_model_transitions::<<$ty as $($path_to_types)*::Guest>::TasklistModel>(arg0)
    }
    #[export_name = "component:tasklist/tasklist#[method]tasklist-model.add-task"]
    unsafe extern "C" fn export_method_tasklist_model_add_task(arg0: *mut u8,arg1: f32,arg2: f32,) -> *mut u8 {
      $($path_to_types)*::_export_method_tasklist_model_add_task_cabi::<<$ty as $($path_to_types)*::Guest>::TasklistModel>(arg0, arg1, arg2)
    }
    #[export_name = "cabi_post_component:tasklist/tasklist#[method]tasklist-model.add-task"]
    unsafe extern "C" fn _post_return_method_tasklist_model_add_task(arg0: *mut u8,) {
      $($path_to_types)*::__post_return_method_tasklist_model_add_task::<<$ty as $($path_to_types)*::Guest>::TasklistModel>(arg0)
    }
    #[export_name = "component:tasklist/tasklist#[method]tasklist-model.remove-task"]
    unsafe extern "C" fn export_method_tasklist_model_remove_task(arg0: *mut u8,arg1: *mut u8,arg2: usize,) {
      $($path_to_types)*::_export_method_tasklist_model_remove_task_cabi::<<$ty as $($path_to_types)*::Guest>::TasklistModel>(arg0, arg1, arg2)
    }
    #[export_name = "component:tasklist/tasklist#[method]tasklist-model.resize-task"]
    unsafe extern "C" fn export_method_tasklist_model_resize_task(arg0: *mut u8,arg1: *mut u8,arg2: usize,arg3: f32,arg4: f32,) {
      $($path_to_types)*::_export_method_tasklist_model_resize_task_cabi::<<$ty as $($path_to_types)*::Guest>::TasklistModel>(arg0, arg1, arg2, arg3, arg4)
    }
    #[export_name = "component:tasklist/tasklist#[method]tasklist-model.move-task"]
    unsafe extern "C" fn export_method_tasklist_model_move_task(arg0: *mut u8,arg1: *mut u8,arg2: usize,arg3: f32,arg4: f32,) {
      $($path_to_types)*::_export_method_tasklist_model_move_task_cabi::<<$ty as $($path_to_types)*::Guest>::TasklistModel>(arg0, arg1, arg2, arg3, arg4)
    }
    #[export_name = "component:tasklist/tasklist#[method]tasklist-model.set-task-name"]
    unsafe extern "C" fn export_method_tasklist_model_set_task_name(arg0: *mut u8,arg1: *mut u8,arg2: usize,arg3: *mut u8,arg4: usize,) {
      $($path_to_types)*::_export_method_tasklist_model_set_task_name_cabi::<<$ty as $($path_to_types)*::Guest>::TasklistModel>(arg0, arg1, arg2, arg3, arg4)
    }
    #[export_name = "component:tasklist/tasklist#[method]tasklist-model.add-transition"]
    unsafe extern "C" fn export_method_tasklist_model_add_transition(arg0: *mut u8,arg1: *mut u8,arg2: usize,arg3: *mut u8,arg4: usize,) -> *mut u8 {
      $($path_to_types)*::_export_method_tasklist_model_add_transition_cabi::<<$ty as $($path_to_types)*::Guest>::TasklistModel>(arg0, arg1, arg2, arg3, arg4)
    }
    #[export_name = "cabi_post_component:tasklist/tasklist#[method]tasklist-model.add-transition"]
    unsafe extern "C" fn _post_return_method_tasklist_model_add_transition(arg0: *mut u8,) {
      $($path_to_types)*::__post_return_method_tasklist_model_add_transition::<<$ty as $($path_to_types)*::Guest>::TasklistModel>(arg0)
    }
    #[export_name = "component:tasklist/tasklist#[method]tasklist-model.remove-transition"]
    unsafe extern "C" fn export_method_tasklist_model_remove_transition(arg0: *mut u8,arg1: *mut u8,arg2: usize,) {
      $($path_to_types)*::_export_method_tasklist_model_remove_transition_cabi::<<$ty as $($path_to_types)*::Guest>::TasklistModel>(arg0, arg1, arg2)
    }
    #[export_name = "component:tasklist/tasklist#[method]tasklist-model.save-to-file"]
    unsafe extern "C" fn export_method_tasklist_model_save_to_file(arg0: *mut u8,arg1: *mut u8,arg2: usize,) {
      $($path_to_types)*::_export_method_tasklist_model_save_to_file_cabi::<<$ty as $($path_to_types)*::Guest>::TasklistModel>(arg0, arg1, arg2)
    }
    #[export_name = "component:tasklist/tasklist#[method]tasklist-model.load-from-file"]
    unsafe extern "C" fn export_method_tasklist_model_load_from_file(arg0: *mut u8,arg1: *mut u8,arg2: usize,) {
      $($path_to_types)*::_export_method_tasklist_model_load_from_file_cabi::<<$ty as $($path_to_types)*::Guest>::TasklistModel>(arg0, arg1, arg2)
    }
    #[export_name = "component:tasklist/tasklist#[static]tasklist-model.create-model-for-empty-file"]
    unsafe extern "C" fn export_static_tasklist_model_create_model_for_empty_file() -> i32 {
      $($path_to_types)*::_export_static_tasklist_model_create_model_for_empty_file_cabi::<<$ty as $($path_to_types)*::Guest>::TasklistModel>()
    }

    const _: () = {
      #[doc(hidden)]
      #[export_name = "component:tasklist/tasklist#[dtor]tasklist-model"]
      #[allow(non_snake_case)]
      unsafe extern "C" fn dtor(rep: *mut u8) {
        $($path_to_types)*::TasklistModel::dtor::<
        <$ty as $($path_to_types)*::Guest>::TasklistModel
        >(rep)
      }
    };

  };);
}
                #[doc(hidden)]
                pub(crate) use __export_component_tasklist_tasklist_cabi;
                #[repr(align(4))]
                struct _RetArea([::core::mem::MaybeUninit<u8>; 36]);
                static mut _RET_AREA: _RetArea = _RetArea([::core::mem::MaybeUninit::uninit(); 36]);
            }
        }
    }
}
mod _rt {
    pub use alloc_crate::string::String;

    use core::fmt;
    use core::marker;
    use core::sync::atomic::{AtomicU32, Ordering::Relaxed};

    /// A type which represents a component model resource, either imported or
    /// exported into this component.
    ///
    /// This is a low-level wrapper which handles the lifetime of the resource
    /// (namely this has a destructor). The `T` provided defines the component model
    /// intrinsics that this wrapper uses.
    ///
    /// One of the chief purposes of this type is to provide `Deref` implementations
    /// to access the underlying data when it is owned.
    ///
    /// This type is primarily used in generated code for exported and imported
    /// resources.
    #[repr(transparent)]
    pub struct Resource<T: WasmResource> {
        // NB: This would ideally be `u32` but it is not. The fact that this has
        // interior mutability is not exposed in the API of this type except for the
        // `take_handle` method which is supposed to in theory be private.
        //
        // This represents, almost all the time, a valid handle value. When it's
        // invalid it's stored as `u32::MAX`.
        handle: AtomicU32,
        _marker: marker::PhantomData<T>,
    }

    /// A trait which all wasm resources implement, namely providing the ability to
    /// drop a resource.
    ///
    /// This generally is implemented by generated code, not user-facing code.
    #[allow(clippy::missing_safety_doc)]
    pub unsafe trait WasmResource {
        /// Invokes the `[resource-drop]...` intrinsic.
        unsafe fn drop(handle: u32);
    }

    impl<T: WasmResource> Resource<T> {
        #[doc(hidden)]
        pub unsafe fn from_handle(handle: u32) -> Self {
            debug_assert!(handle != u32::MAX);
            Self {
                handle: AtomicU32::new(handle),
                _marker: marker::PhantomData,
            }
        }

        /// Takes ownership of the handle owned by `resource`.
        ///
        /// Note that this ideally would be `into_handle` taking `Resource<T>` by
        /// ownership. The code generator does not enable that in all situations,
        /// unfortunately, so this is provided instead.
        ///
        /// Also note that `take_handle` is in theory only ever called on values
        /// owned by a generated function. For example a generated function might
        /// take `Resource<T>` as an argument but then call `take_handle` on a
        /// reference to that argument. In that sense the dynamic nature of
        /// `take_handle` should only be exposed internally to generated code, not
        /// to user code.
        #[doc(hidden)]
        pub fn take_handle(resource: &Resource<T>) -> u32 {
            resource.handle.swap(u32::MAX, Relaxed)
        }

        #[doc(hidden)]
        pub fn handle(resource: &Resource<T>) -> u32 {
            resource.handle.load(Relaxed)
        }
    }

    impl<T: WasmResource> fmt::Debug for Resource<T> {
        fn fmt(&self, f: &mut fmt::Formatter<'_>) -> fmt::Result {
            f.debug_struct("Resource")
                .field("handle", &self.handle)
                .finish()
        }
    }

    impl<T: WasmResource> Drop for Resource<T> {
        fn drop(&mut self) {
            unsafe {
                match self.handle.load(Relaxed) {
                    // If this handle was "taken" then don't do anything in the
                    // destructor.
                    u32::MAX => {}

                    // ... but otherwise do actually destroy it with the imported
                    // component model intrinsic as defined through `T`.
                    other => T::drop(other),
                }
            }
        }
    }
    pub use alloc_crate::boxed::Box;

    #[cfg(target_arch = "wasm32")]
    pub fn run_ctors_once() {
        wit_bindgen_rt::run_ctors_once();
    }
    pub unsafe fn cabi_dealloc(ptr: *mut u8, size: usize, align: usize) {
        if size == 0 {
            return;
        }
        let layout = alloc::Layout::from_size_align_unchecked(size, align);
        alloc::dealloc(ptr as *mut u8, layout);
    }

    pub fn as_f32<T: AsF32>(t: T) -> f32 {
        t.as_f32()
    }

    pub trait AsF32 {
        fn as_f32(self) -> f32;
    }

    impl<'a, T: Copy + AsF32> AsF32 for &'a T {
        fn as_f32(self) -> f32 {
            (*self).as_f32()
        }
    }

    impl AsF32 for f32 {
        #[inline]
        fn as_f32(self) -> f32 {
            self as f32
        }
    }
    pub use alloc_crate::alloc;
    pub use alloc_crate::vec::Vec;
    pub unsafe fn string_lift(bytes: Vec<u8>) -> String {
        if cfg!(debug_assertions) {
            String::from_utf8(bytes).unwrap()
        } else {
            String::from_utf8_unchecked(bytes)
        }
    }
    extern crate alloc as alloc_crate;
}

/// Generates `#[no_mangle]` functions to export the specified type as the
/// root implementation of all generated traits.
///
/// For more information see the documentation of `wit_bindgen::generate!`.
///
/// ```rust
/// # macro_rules! export{ ($($t:tt)*) => (); }
/// # trait Guest {}
/// struct MyType;
///
/// impl Guest for MyType {
///     // ...
/// }
///
/// export!(MyType);
/// ```
#[allow(unused_macros)]
#[doc(hidden)]

macro_rules! __export_example_impl {
  ($ty:ident) => (self::export!($ty with_types_in self););
  ($ty:ident with_types_in $($path_to_types_root:tt)*) => (
  $($path_to_types_root)*::exports::component::tasklist::tasklist::__export_component_tasklist_tasklist_cabi!($ty with_types_in $($path_to_types_root)*::exports::component::tasklist::tasklist);
  )
}
#[doc(inline)]
pub(crate) use __export_example_impl as export;

#[cfg(target_arch = "wasm32")]
#[link_section = "component-type:wit-bindgen:0.25.0:example:encoded world"]
#[doc(hidden)]
pub static __WIT_BINDGEN_COMPONENT_TYPE: [u8; 1147] = *b"\
\0asm\x0d\0\x01\0\0\x19\x16wit-component-encoding\x04\0\x07\xfd\x07\x01A\x02\x01\
A\x02\x01B'\x01r\x02\x01xv\x01yv\x04\0\x08position\x03\0\0\x01r\x02\x05widthv\x06\
heightv\x04\0\x04size\x03\0\x02\x01k\x03\x01r\x04\x02ids\x04names\x08position\x01\
\x04size\x04\x04\0\x04task\x03\0\x05\x01r\x03\x02ids\x0esource-task-ids\x0etarge\
t-task-ids\x04\0\x0atransition\x03\0\x07\x04\0\x0etasklist-model\x03\x01\x01h\x09\
\x01@\x01\x04self\x0a\0s\x04\0\x19[method]tasklist-model.id\x01\x0b\x01p\x06\x01\
@\x01\x04self\x0a\0\x0c\x04\0\x1c[method]tasklist-model.tasks\x01\x0d\x01p\x08\x01\
@\x01\x04self\x0a\0\x0e\x04\0\"[method]tasklist-model.transitions\x01\x0f\x01@\x02\
\x04self\x0a\x08position\x01\0\x06\x04\0\x1f[method]tasklist-model.add-task\x01\x10\
\x01@\x02\x04self\x0a\x07task-ids\x01\0\x04\0\"[method]tasklist-model.remove-tas\
k\x01\x11\x01@\x03\x04self\x0a\x07task-ids\x04size\x03\x01\0\x04\0\"[method]task\
list-model.resize-task\x01\x12\x01@\x03\x04self\x0a\x07task-ids\x08position\x01\x01\
\0\x04\0\x20[method]tasklist-model.move-task\x01\x13\x01@\x03\x04self\x0a\x07tas\
k-ids\x05labels\x01\0\x04\0$[method]tasklist-model.set-task-name\x01\x14\x01@\x03\
\x04self\x0a\x0esource-task-ids\x0etarget-task-ids\0\x08\x04\0%[method]tasklist-\
model.add-transition\x01\x15\x01@\x02\x04self\x0a\x0dtransition-ids\x01\0\x04\0(\
[method]tasklist-model.remove-transition\x01\x16\x01@\x02\x04self\x0a\x08filenam\
es\x01\0\x04\0#[method]tasklist-model.save-to-file\x01\x17\x04\0%[method]tasklis\
t-model.load-from-file\x01\x17\x01i\x09\x01@\0\0\x18\x04\02[static]tasklist-mode\
l.create-model-for-empty-file\x01\x19\x04\x01\x1bcomponent:tasklist/tasklist\x05\
\0\x04\x01\x1acomponent:tasklist/example\x04\0\x0b\x0d\x01\0\x07example\x03\0\0\0\
G\x09producers\x01\x0cprocessed-by\x02\x0dwit-component\x070.208.1\x10wit-bindge\
n-rust\x060.25.0";

#[inline(never)]
#[doc(hidden)]
#[cfg(target_arch = "wasm32")]
pub fn __link_custom_section_describing_imports() {
    wit_bindgen_rt::maybe_link_cabi_realloc();
}
